name: Runa

on:
  workflow_call:
    inputs:
      ref:
        description: Branch or full ref (refs/heads/branch).
        required: true
        type: string
    secrets:
      OPENROUTER_API_KEY:
        required: false
      OPENAI_API_KEY:
        required: false
      # RUNAAI_APP_ID:
      #   required: false
      # RUNAAI_APP_PRIVATE_KEY:
      #   required: false

permissions:
  contents: read
  pull-requests: write
  issues: write
  # checks: write

concurrency:
  # group: runa-${{ inputs.ref || github.run_id }}
  group: runa-${{ inputs.ref }}
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    # env:
    # RUNAAI_APP_ID: ${{ secrets.RUNAAI_APP_ID }}
    # RUNAAI_APP_PRIVATE_KEY: ${{ secrets.RUNAAI_APP_PRIVATE_KEY }}
    steps:
      - name: Validate inputs
        run: |
          if [ -z "${{ inputs.ref }}" ]; then
            echo "'ref' must be provided."; exit 1;
          fi

      - name: Detect PR
        id: detect
        uses: actions/github-script@v7
        env:
          INPUT_REF: ${{ inputs.ref }}
        with:
          script: |
            const raw = (process.env.INPUT_REF || '').trim();
            const branch = raw.replace(/^refs\/heads\//, '');

            if (!branch) { core.setFailed('ref is not provided'); return; }

            const { data } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branch}`,
              per_page: 1,
            });

            if (data.length) {
              const pr = data[0];
              core.setOutput('number', String(pr.number));
              core.setOutput('link', pr.html_url);
              return;
            }

            const pulls = await github.paginate(github.rest.pulls.list, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100,
            });

            const pr = pulls.find(p => p.head && p.head.ref === branch);

            if (!pr) {
              core.setFailed(`No open PR found for branch '${branch}'. If this is a fork, ensure an open PR exists.`);
              return;
            }

            core.setOutput('number', String(pr.number));
            core.setOutput('link', pr.html_url);

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: vssavosko/runa
          ref: v1
          # path: runa

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        # run: pnpm -C runa install --frozen-lockfile
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build:ci

      # - name: Create GitHub App token (optional)
      #   id: app
      #   if: ${{ env.RUNAAI_APP_ID != '' && env.RUNAAI_APP_PRIVATE_KEY != '' }}
      #   uses: actions/create-github-app-token@v1
      #   with:
      #     app-id: ${{ env.RUNAAI_APP_ID }}
      #     private-key: ${{ env.RUNAAI_APP_PRIVATE_KEY }}

      - name: Run Runa E2E Runner
        # working-directory: runa
        env:
          PR_LINK: ${{ steps.detect.outputs.link }}
          # GITHUB_PERSONAL_ACCESS_TOKEN: ${{ steps.app.outputs.token || secrets.GITHUB_TOKEN }}
          GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          echo "PR: $PR_LINK"
          node --input-type=module -e '
            const PR_LINK = process.env.PR_LINK;

            const { mastra } = await import("./lib/mastra/index.js");

            const workflow = mastra.getWorkflow("qaWorkflow");

            if (!workflow) { console.error("qaWorkflow not found"); process.exit(1); }

            const run = await workflow.createRunAsync();

            const result = await run.start({ inputData: { prLink: PR_LINK } });

            console.log("qaWorkflow result:", result);

            if (result.status !== "success") {
              process.exit(1);
            }'
